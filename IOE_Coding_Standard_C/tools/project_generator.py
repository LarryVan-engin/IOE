#!/usr/bin/env python3
"""
IOE INNOVATION Team - Project Generator Tool
============================================

This tool generates new C projects following IOE coding standards.
It creates the complete project structure with templates and documentation.

Author: IOE INNOVATION Team
Version: 1.0.0
Date: 2025-10-23
"""

import os
import sys
import argparse
from datetime import datetime
from pathlib import Path

# Project template data
TEMPLATE_DATA = {
    'project_name': 'IOE_New_Project',
    'author_name': 'IOE INNOVATION Team',
    'author_email': 'team@ioe.innovation',
    'creation_date': datetime.now().strftime('%Y-%m-%d'),
    'version': '1.0.0',
    'license': 'MIT License',
    'hardware': 'Generic C',
    'compiler': 'GCC 9.4.0 or newer'
}

def create_directory_structure(base_path):
    """Create the standard IOE project directory structure."""
    directories = [
        'src',
        'include', 
        'examples/basic_demo',
        'docs',
        'tools',
        'tests/unit',
        'tests/mocks'
    ]
    
    for dir_path in directories:
        full_path = base_path / dir_path
        full_path.mkdir(parents=True, exist_ok=True)
        print(f"  FOLDER: Created: {dir_path}/")

def generate_makefile(base_path, project_name):
    """Generate Makefile for the project."""
    makefile_content = f'''# IOE INNOVATION Team - {project_name} Makefile
# Generated by IOE Project Generator on {TEMPLATE_DATA['creation_date']}

#**********************************************************************************************************************
# General Information
#**********************************************************************************************************************
# Project:      {project_name}
# File:         Makefile  
# Description:  Build system for {project_name}
# Author:       {TEMPLATE_DATA['author_name']}
# Created:      {TEMPLATE_DATA['creation_date']}
# Version:      {TEMPLATE_DATA['version']}
#**********************************************************************************************************************

# Compiler Configuration
CC ?= gcc
CFLAGS_BASE = -std=c11 -pedantic
CFLAGS_WARNINGS = -Wall -Wextra -Wshadow -Wstrict-prototypes -Wmissing-prototypes
CFLAGS_DEBUG = -g -O0 -DDEBUG=1
CFLAGS_RELEASE = -O2 -DNDEBUG=1

# Include paths
INCLUDE_DIRS = -Iinclude -Isrc -I.
CFLAGS = $(CFLAGS_BASE) $(CFLAGS_WARNINGS) $(CFLAGS_DEBUG) $(INCLUDE_DIRS)

# Project Configuration
PROJECT_NAME = {project_name.lower()}
TARGET = $(PROJECT_NAME)
SRC_DIR = src
INCLUDE_DIR = include

# Source files
SOURCES = $(wildcard $(SRC_DIR)/*.c)
OBJECTS = $(SOURCES:.c=.o)
DEPS = $(OBJECTS:.o=.d)

# Tools
FORMATTER = clang-format
ANALYZER = cppcheck
FORMAT_STYLE = -style="{{BasedOnStyle: GNU, IndentWidth: 4, TabWidth: 4, UseTab: Never}}"

# Build Targets
.DEFAULT_GOAL := help

all: $(TARGET)
	@echo "SUCCESS: Build completed successfully!"

$(TARGET): $(OBJECTS)
	@echo "Linking Linking $(TARGET)..."
	$(CC) $(OBJECTS) -o $@ $(LDFLAGS)

%.o: %.c
	@echo "üî® Compiling $<..."
	$(CC) $(CFLAGS) -MMD -MP -c $< -o $@

# Development targets
debug: CFLAGS = $(CFLAGS_BASE) $(CFLAGS_WARNINGS) $(CFLAGS_DEBUG) $(INCLUDE_DIRS) -fsanitize=address
debug: LDFLAGS += -fsanitize=address
debug: $(TARGET)

release: CFLAGS = $(CFLAGS_BASE) $(CFLAGS_WARNINGS) $(CFLAGS_RELEASE) $(INCLUDE_DIRS)
release: $(TARGET)

# Code quality
format:
	@echo "Formatting Formatting code..."
	@if command -v $(FORMATTER) > /dev/null; then \\
		find $(SRC_DIR) $(INCLUDE_DIR) -name "*.c" -o -name "*.h" | \\
		xargs $(FORMATTER) -i $(FORMAT_STYLE); \\
		echo "SUCCESS: Code formatting completed"; \\
	else \\
		echo "WARNING:  $(FORMATTER) not found"; \\
	fi

check:
	@echo "Analyzing Running static analysis..."
	@if command -v $(ANALYZER) > /dev/null; then \\
		$(ANALYZER) --enable=all --std=c11 --suppress=missingIncludeSystem --quiet $(SOURCES); \\
		echo "SUCCESS: Static analysis completed"; \\
	else \\
		echo "WARNING:  $(ANALYZER) not found"; \\
	fi

# Testing
test: $(TARGET)
	@echo "INFO: Running tests..."
	@./$(TARGET) --test

# Utility targets
run: $(TARGET)
	@echo "üèÉ Running $(TARGET)..."
	@./$(TARGET)

clean:
	@echo "üßπ Cleaning build files..."
	@rm -f $(OBJECTS) $(DEPS) $(TARGET)

distclean: clean
	@echo "üßπ Deep cleaning..."
	@rm -rf docs/html docs/latex

rebuild: distclean all

help:
	@echo "INFO:  {project_name} - Available targets:"
	@echo "   all      - Build the project (default)"
	@echo "   debug    - Build with debug info"
	@echo "   release  - Build optimized version"
	@echo "   format   - Format source code"
	@echo "   check    - Run static analysis"
	@echo "   test     - Run tests"
	@echo "   run      - Execute program"
	@echo "   clean    - Remove build files"
	@echo "   help     - Show this help"

# Include dependencies
-include $(DEPS)

.PHONY: all debug release format check test run clean distclean rebuild help
'''
    
    makefile_path = base_path / 'Makefile'
    with open(makefile_path, 'w') as f:
        f.write(makefile_content)
    print(f"  FILE: Created: Makefile")

def generate_readme(base_path, project_name):
    """Generate README.md for the project."""
    readme_content = f'''# {project_name}

## T·ªïng quan
{project_name} ƒë∆∞·ª£c ph√°t tri·ªÉn theo ti√™u chu·∫©n coding c·ªßa IOE INNOVATION Team.

## C·∫•u tr√∫c d·ª± √°n

```
{project_name}/
‚îú‚îÄ‚îÄ README.md                    # T√†i li·ªáu ch√≠nh
‚îú‚îÄ‚îÄ Makefile                     # Build system
‚îú‚îÄ‚îÄ src/                         # Source code
‚îÇ   ‚îú‚îÄ‚îÄ main.c                   # ·ª®ng d·ª•ng ch√≠nh
‚îÇ   ‚îî‚îÄ‚îÄ {project_name.lower()}_module.c    # Module implementation
‚îú‚îÄ‚îÄ include/                     # Header files
‚îÇ   ‚îú‚îÄ‚îÄ {project_name.lower()}_common.h   # Common definitions
‚îÇ   ‚îî‚îÄ‚îÄ {project_name.lower()}_module.h   # Module interface
‚îú‚îÄ‚îÄ examples/                    # V√≠ d·ª• s·ª≠ d·ª•ng
‚îÇ   ‚îî‚îÄ‚îÄ basic_demo/             # Demo c∆° b·∫£n
‚îú‚îÄ‚îÄ docs/                        # T√†i li·ªáu
‚îî‚îÄ‚îÄ tests/                       # Test code
```

## Y√™u c·∫ßu h·ªá th·ªëng
- **Compiler**: GCC 7.0+ ho·∫∑c Clang 8.0+
- **Build Tools**: Make, clang-format (optional), cppcheck (optional)
- **Platform**: Linux, macOS, Windows (with MinGW)

## H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng

### Build d·ª± √°n
```bash
# Clone/copy project
cd {project_name}/

# Build debug version
make

# Build release version  
make release

# Run program
make run
```

### Development workflow
```bash
# Format code
make format

# Static analysis
make check

# Run tests
make test

# Clean build
make clean
```

## API Reference

### Initialization
```c
#include "{project_name.lower()}_module.h"

int result = {project_name.lower()}_init();
if (result != {project_name.upper()}_SUCCESS) {{
    // Handle error
}}
```

### Basic Usage
```c
// Example usage code here
```

## Testing

```bash
# Run all tests
make test

# Build v√† run specific test
cd tests/
make unit_test
```

## Contributing

1. Follow IOE coding standards
2. Add unit tests for new features
3. Update documentation
4. Run `make format check` before commit

## License

{TEMPLATE_DATA['license']}

## Contact

**{TEMPLATE_DATA['author_name']}**
- Email: {TEMPLATE_DATA['author_email']}
- Project: {project_name}

---
*Generated by IOE Project Generator v1.0.0*  
*Created: {TEMPLATE_DATA['creation_date']}*
'''
    
    readme_path = base_path / 'README.md'
    with open(readme_path, 'w') as f:
        f.write(readme_content)
    print(f"  FILE: Created: README.md")

def generate_header_template(base_path, project_name):
    """Generate common header file."""
    header_content = f'''/*******************************************************************************************************************
 * General Information
 ********************************************************************************************************************
 * Project:       {project_name}
 * File:          {project_name.lower()}_common.h
 * Description:   Common definitions and constants for {project_name}
 * 
 * Author:        {TEMPLATE_DATA['author_name']}
 * Email:         {TEMPLATE_DATA['author_email']}
 * Created:       {TEMPLATE_DATA['creation_date']}
 * Last Update:   {TEMPLATE_DATA['creation_date']}
 * Version:       {TEMPLATE_DATA['version']}
 * 
 * Hardware:      {TEMPLATE_DATA['hardware']}
 * Compiler:      {TEMPLATE_DATA['compiler']}
 * 
 * Copyright:     (c) 2025 IOE INNOVATION Team
 * License:       {TEMPLATE_DATA['license']}
 * 
 * Notes:         This file contains common definitions used throughout the project
 *                - Return codes and status definitions
 *                - Common data types and structures
 *                - Project-wide constants
 *******************************************************************************************************************/

#ifndef {project_name.upper()}_COMMON_H
#define {project_name.upper()}_COMMON_H

#ifdef __cplusplus
extern "C" {{
#endif

/**********************************************************************************************************************
 * Includes
 *********************************************************************************************************************/
#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

/**********************************************************************************************************************
 * Macro definitions
 *********************************************************************************************************************/

/* Project version */
#define {project_name.upper()}_VERSION_MAJOR    (1U)
#define {project_name.upper()}_VERSION_MINOR    (0U)
#define {project_name.upper()}_VERSION_PATCH    (0U)

/* Return codes */
#define {project_name.upper()}_SUCCESS          (0)
#define {project_name.upper()}_ERROR            (-1)
#define {project_name.upper()}_INVALID_PARAM    (-2)
#define {project_name.upper()}_NOT_INITIALIZED  (-3)
#define {project_name.upper()}_TIMEOUT          (-4)

/* Common constants */
#define {project_name.upper()}_MAX_NAME_LENGTH  (64U)
#define {project_name.upper()}_DEFAULT_TIMEOUT  (1000U)

/**********************************************************************************************************************
 * Typedef definitions
 *********************************************************************************************************************/

/**
 * @brief Project status enumeration
 */
typedef enum
{{
    {project_name.upper()}_STATUS_IDLE = 0U,      /**< System is idle */
    {project_name.upper()}_STATUS_BUSY,           /**< System is busy */
    {project_name.upper()}_STATUS_READY,          /**< System is ready */
    {project_name.upper()}_STATUS_ERROR           /**< System has error */
}} {project_name.lower()}_status_t;

/**********************************************************************************************************************
 * Exported global functions (API)
 *********************************************************************************************************************/

/******************************************************************************************************************//**
 * @addtogroup {project_name.upper()}_Common_API
 * @{{
 *********************************************************************************************************************/

/******************************************************************************************************************//**
 * @brief Get project version information
 * @return Version string
 *********************************************************************************************************************/
const char *{project_name.lower()}_get_version(void);

/******************************************************************************************************************//**
 * @}} (end addtogroup {project_name.upper()}_Common_API)
 *********************************************************************************************************************/

#ifdef __cplusplus
}}
#endif

#endif /* {project_name.upper()}_COMMON_H */

/*******************************************************************************************************************
 * End of File
 *******************************************************************************************************************/'''
    
    header_path = base_path / 'include' / f'{project_name.lower()}_common.h'
    with open(header_path, 'w') as f:
        f.write(header_content)
    print(f"  FILE: Created: include/{project_name.lower()}_common.h")

def generate_main_file(base_path, project_name):
    """Generate main.c file."""
    main_content = f'''/*******************************************************************************************************************
 * General Information
 ********************************************************************************************************************
 * Project:       {project_name}
 * File:          main.c
 * Description:   Main application entry point for {project_name}
 * 
 * Author:        {TEMPLATE_DATA['author_name']}
 * Email:         {TEMPLATE_DATA['author_email']}
 * Created:       {TEMPLATE_DATA['creation_date']}
 * Last Update:   {TEMPLATE_DATA['creation_date']}
 * Version:       {TEMPLATE_DATA['version']}
 * 
 * Hardware:      {TEMPLATE_DATA['hardware']}
 * Compiler:      {TEMPLATE_DATA['compiler']}
 * 
 * Copyright:     (c) 2025 IOE INNOVATION Team
 * License:       {TEMPLATE_DATA['license']}
 * 
 * Dependencies:  {project_name.lower()}_common.h
 * 
 * Notes:         This is the main application file
 *                - Initializes system components
 *                - Handles command line arguments
 *                - Manages application lifecycle
 *******************************************************************************************************************/

/**********************************************************************************************************************
 * Includes
 *********************************************************************************************************************/
#include "{project_name.lower()}_common.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/**********************************************************************************************************************
 * Macro definitions
 *********************************************************************************************************************/
#define APP_NAME               "{project_name}"
#define APP_DESCRIPTION        "IOE INNOVATION Team project"

/**********************************************************************************************************************
 * Private function prototypes
 *********************************************************************************************************************/
static int app_initialize(void);
static void app_cleanup(void);
static void app_print_banner(void);
static void app_print_usage(const char *prog_name);
static int app_handle_arguments(int argc, char *argv[]);

/**********************************************************************************************************************
 * Private global variables
 *********************************************************************************************************************/
static bool g_verbose_mode = false;
static bool g_test_mode = false;

/**********************************************************************************************************************
 * Function Implementation
 *********************************************************************************************************************/

/******************************************************************************************************************//**
 * @brief Main application entry point
 * @param[in] argc  Number of command line arguments
 * @param[in] argv  Array of command line arguments
 * @return Exit status code
 *********************************************************************************************************************/
int main(int argc, char *argv[])
{{
    int ret_val = EXIT_SUCCESS;
    
    /* Print application banner */
    app_print_banner();
    
    /* Handle command line arguments */
    if (app_handle_arguments(argc, argv) != {project_name.upper()}_SUCCESS)
    {{
        app_print_usage(argv[0]);
        return EXIT_FAILURE;
    }}
    
    /* Initialize application */
    if (app_initialize() != {project_name.upper()}_SUCCESS)
    {{
        fprintf(stderr, "ERROR: Application initialization failed!\\n");
        return EXIT_FAILURE;
    }}
    
    printf("SUCCESS: Application initialized successfully\\n");
    
    if (g_test_mode)
    {{
        printf("INFO: Running in test mode...\\n");
        printf("SUCCESS: Test completed successfully\\n");
    }}
    else
    {{
        printf("INFO: Running {project_name}...\\n");
        
        /* Main application logic here */
        printf("INFO: Application logic executed\\n");
        
        printf("SUCCESS: Application completed successfully\\n");
    }}
    
    /* Cleanup and exit */
    app_cleanup();
    printf("üëã Application finished. Goodbye!\\n");
    
    return ret_val;
}}

/**********************************************************************************************************************
 * Private Functions
 *********************************************************************************************************************/

/******************************************************************************************************************//**
 * @brief Initialize application components
 * @return Status code
 *********************************************************************************************************************/
static int app_initialize(void)
{{
    if (g_verbose_mode)
    {{
        printf("INIT: Initializing {project_name}...\\n");
        printf("  INFO: Version: %s\\n", {project_name.lower()}_get_version());
    }}
    
    /* TODO: Add initialization code here */
    
    return {project_name.upper()}_SUCCESS;
}}

/******************************************************************************************************************//**
 * @brief Cleanup application resources
 *********************************************************************************************************************/
static void app_cleanup(void)
{{
    if (g_verbose_mode)
    {{
        printf("üßπ Cleaning up application resources...\\n");
    }}
    
    /* TODO: Add cleanup code here */
}}

/******************************************************************************************************************//**
 * @brief Print application banner
 *********************************************************************************************************************/
static void app_print_banner(void)
{{
    printf("\\n");
    printf("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\\n");
    printf("   %s\\n", APP_NAME);
    printf("   %s\\n", APP_DESCRIPTION);
    printf("   Version %s\\n", {project_name.lower()}_get_version());
    printf("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\\n");
    printf("\\n");
}}

/******************************************************************************************************************//**
 * @brief Print usage information
 * @param[in] prog_name  Program name
 *********************************************************************************************************************/
static void app_print_usage(const char *prog_name)
{{
    printf("Usage: %s [options]\\n", prog_name);
    printf("\\n");
    printf("Options:\\n");
    printf("  -v, --verbose    Enable verbose output\\n");
    printf("  -t, --test       Run in test mode\\n");
    printf("  -h, --help       Show this help message\\n");
    printf("\\n");
}}

/******************************************************************************************************************//**
 * @brief Handle command line arguments
 * @param[in] argc  Number of arguments
 * @param[in] argv  Argument array
 * @return Status code
 *********************************************************************************************************************/
static int app_handle_arguments(int argc, char *argv[])
{{
    for (int i = 1; i < argc; i++)
    {{
        if (strcmp(argv[i], "-v") == 0 || strcmp(argv[i], "--verbose") == 0)
        {{
            g_verbose_mode = true;
        }}
        else if (strcmp(argv[i], "-t") == 0 || strcmp(argv[i], "--test") == 0)
        {{
            g_test_mode = true;
        }}
        else if (strcmp(argv[i], "-h") == 0 || strcmp(argv[i], "--help") == 0)
        {{
            return {project_name.upper()}_ERROR;
        }}
        else
        {{
            fprintf(stderr, "Error: Unknown argument '%s'\\n", argv[i]);
            return {project_name.upper()}_ERROR;
        }}
    }}
    
    return {project_name.upper()}_SUCCESS;
}}

/******************************************************************************************************************//**
 * @brief Get project version information
 * @return Version string
 *********************************************************************************************************************/
const char *{project_name.lower()}_get_version(void)
{{
    return "{TEMPLATE_DATA['version']}";
}}

/*******************************************************************************************************************
 * End of File
 *******************************************************************************************************************/'''
    
    main_path = base_path / 'src' / 'main.c'
    with open(main_path, 'w') as f:
        f.write(main_content)
    print(f"  FILE: Created: src/main.c")

def generate_gitignore(base_path):
    """Generate .gitignore file."""
    gitignore_content = '''# IOE INNOVATION Team - Git Ignore Rules
# Build artifacts
build/
*.o
*.d
*.bin
*.hex
*.elf
*.a
*.so

# IDE files
.vscode/settings.json
*.code-workspace
.clangd/
compile_commands.json

# System files
.DS_Store
Thumbs.db
*.swp
*~

# Temporary files
*.tmp
*.log
*.bak

# Documentation artifacts
docs/html/
docs/latex/
docs/xml/

# Test artifacts
test_results/
coverage/
'''
    
    gitignore_path = base_path / '.gitignore'
    with open(gitignore_path, 'w') as f:
        f.write(gitignore_content)
    print(f"  FILE: Created: .gitignore")

def main():
    """Main function."""
    parser = argparse.ArgumentParser(
        description='IOE INNOVATION Team - Project Generator',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
Examples:
  %(prog)s MyProject              # Create project named MyProject
  %(prog)s --author "John Doe" MyApp  # Create with custom author
  %(prog)s --help                 # Show this help
        '''
    )
    
    parser.add_argument('project_name', 
                       help='Name of the project to create')
    parser.add_argument('--author', 
                       default=TEMPLATE_DATA['author_name'],
                       help='Author name (default: %(default)s)')
    parser.add_argument('--email',
                       default=TEMPLATE_DATA['author_email'], 
                       help='Author email (default: %(default)s)')
    parser.add_argument('--license',
                       default=TEMPLATE_DATA['license'],
                       help='Project license (default: %(default)s)')
    parser.add_argument('--force', '-f',
                       action='store_true',
                       help='Overwrite existing directory')
    
    args = parser.parse_args()
    
    # Update template data with arguments
    TEMPLATE_DATA['project_name'] = args.project_name
    TEMPLATE_DATA['author_name'] = args.author
    TEMPLATE_DATA['author_email'] = args.email
    TEMPLATE_DATA['license'] = args.license
    
    # Create project directory
    project_path = Path(args.project_name)
    
    if project_path.exists():
        if not args.force:
            print(f"ERROR: Directory '{args.project_name}' already exists!")
            print("   Use --force to overwrite, or choose a different name.")
            return 1
        else:
            print(f"WARNING:  Overwriting existing directory '{args.project_name}'")
    
    print(f"INFO: Creating IOE project: {args.project_name}")
    print(f"   Author: {args.author} <{args.email}>")
    print(f"   License: {args.license}")
    print()
    
    # Create directory structure
    print("FOLDER: Creating directory structure...")
    project_path.mkdir(exist_ok=True)
    create_directory_structure(project_path)
    
    # Generate files
    print("\\nFILE: Generating project files...")
    generate_makefile(project_path, args.project_name)
    generate_readme(project_path, args.project_name)
    generate_header_template(project_path, args.project_name)
    generate_main_file(project_path, args.project_name)
    generate_gitignore(project_path)
    
    # Final instructions
    print(f"""
SUCCESS: Project '{args.project_name}' created successfully!

INFO: Next steps:
   cd {args.project_name}/
   make                    # Build the project
   make run               # Run the application
   make help              # See all available targets

Documentation:
   README.md              # Project overview
   docs/                  # Detailed documentation
   
INFO:  Development:
   make format            # Format code
   make check             # Static analysis
   make debug             # Debug build
   
Happy coding! INFO:
""")
    
    return 0

if __name__ == '__main__':
    sys.exit(main())